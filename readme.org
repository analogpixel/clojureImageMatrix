* Image Manipulation with clojure

** Configure the project
Before you begin, you'll need to get [[http://leiningen.org/][Leiningen]] which is a project manager
for clojure.  Once you have it installed, you run:
#+begin_src sh
lein new image
#+end_src
to create a new project called image. Once the project is created open the project.clj
file add add a :main section to point to your main function (defn -main in your source)
and then add the core.matrix and clatrix dependencies.  Now from the command line you can
run lein deps from the image directory, and lein will go out and download all the libraries
you requested, and all their dependencies.

#+begin_src clojure :tangle project.clj
(defproject image "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :main image.core
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [net.mikera/core.matrix "0.32.1"]
                 [clatrix "0.4.0"]
                 ])
#+end_src

 If you are using emacs, and have [[https://github.com/clojure-emacs/cider][CIDER]] installed (=M-x package-install= cider)
you can now open image/project.clj from emacs and then type:
=M-x cider-jack-in= to connect to that project and edit it live in the REPL.
Now that you have a REPL running in emacs connected to your project, you can open
src/image/core.clj and start editing the program.

** Clojure namespace
The begining of the program is the name space declaration.  The name space has
three main sections (besides the name)
*** require
load a clojure library from your class path and imports it, with the :as flag it will
alias it so yo don't need to type out the entire lib name each time you want
to use something from it.
*** use
loads an existing namespace and refers all the symbols from it into this namespace. So
by using clojure.core.matrix you have all the function available in your namespace.
*** import
Import is used to import java libraries into the clojure namespace. If you want to
load java.io.File and java.io.FileInputStream, you can use the notation:
(java.io File FileInputStream)  but if you just want to load javax.imageio.ImageIO,
placing () around it will actually break it and won't load it into the namespace
like you'd want.
#+begin_src clojure :tangle src/image/core.clj
(ns image.core
  (:use clojure.core.matrix)
  (:require [clatrix.core :as cl])
  (:import (java.io File FileInputStream) javax.imageio.ImageIO java.awt.image.BufferedImage)
)
#+end_src

** Loading an image into a matrix
Images are loaded via the java BufferedImage class.  Once the image is loaded
it is converted into Matrix format and returned.  The makeMatrix format just takes
a long array [2 2 2 2 2 2 2 2 2 2] and converts it into [ [2 2] [2 2] [2 2]....]

#+begin_src clojure :tangle src/image/core.clj
(defn makeMatrix [min mout w]
  (if (<= (count min) 0)
    mout
    (makeMatrix (drop w min) (conj mout (into [] (take w min))) w)
    )
  )

(defn loadImageMatrix [filename]
  (set! *warn-on-reflection* true)
  (def img  (ImageIO/read (FileInputStream. (File. filename))))
  (def w  (.getWidth img))
  (def h (.getHeight img))

  (cl/matrix (makeMatrix (.getRGB ^BufferedImage img 0 0 w h nil 0, w ) [] w))
  )
#+end_src

** Saving a matrix into an image
This function saves a matrix back into an image

#+begin_src clojure :tangle src/image/core.clj
(defn saveImageMatrix [imgMatrix imtype filename]
  (let [
        h (row-count imgMatrix)
        w (column-count imgMatrix)
        bufImg (BufferedImage. w h BufferedImage/TYPE_INT_ARGB)
        ]

    (dotimes [y h]
      (dotimes [x w]
        (.setRGB bufImg x y (cl/get imgMatrix y x))
        )
      )
    (ImageIO/write ^BufferedImage bufImg imtype  (File. filename))
    )
  )
#+end_src

** 32bit RGBA values
given a 32bit value, extract the RGBA values from it

[AAAAAAAARRRRRRRRGGGGGGGGBBBBBBBB]

To get the Alpha value A from a 32bit binary value, you would shift off the RGB values, so
move everything to the right 24 times so those values slide off and you are just left with
AAAAAAAA

to get the Red value R from a 32bit binary value, you would shift off the GB values, so
move everyhing to the right 16 times to remove all the G and B bits, and you are left with
AAAAAAAARRRRRRRR.  You then  do a binary and of 0000000011111111 and have that remove the
first 8 bits if they exist.

To get the Green value G from a 32bit binary value, you would shift off the B values,
and then do a binary and of 000000000000000011111111 to remove the A and R values.

to get the Blue value B from a 32bit binary value, you would shift off nothing, and
then do a binary and of 00000000000000000000000011111111 to get just the blue value

#+begin_src clojure :tangle src/image/core.clj
(defn unpackrgba [rgba]
  (let [r (bit-and (bit-shift-right rgba 16) 0xFF)
        g (bit-and (bit-shift-right rgba 8) 0xFF)
        b (bit-and (bit-shift-right rgba 0) 0xFF)
        a (bit-and (bit-shift-right rgba 24) 0xFF)
        ]

  [r g b a]
  )
)
#+end_src

To explore binary conversion in clojure, you can call the (Integer/toString <number> <base>) function
to print out number in base.  So if you have the integer 982044636 and you wanted to see what
the binary value looked like you could run:
#+begin_src clojure
(Integer/toString 982044636 2)
#+end_src
and get: "111010100010001100111111011100".  Now if you wanted to shift some values you would run:
#+begin_src clojure
(Integer/toString (bit-shift-right 982044636 16) 2)
#+end_src
to get: "11101010001000" which is the above number with the 16 right most bits removed.

To get RGBA values back into a single 32bit number
#+begin_src clojure :tangle src/image/core.clj
(defn packrgba [r g b a]
  (bit-or
  (bit-shift-left r 16)
  (bit-shift-left g 8)
  (bit-shift-left b 0)
  (bit-shift-left a 24)
  )
  )
#+end_src


** Reducing the intensity levels of your image
#+begin_src clojure :tangle src/image/core.clj
(defn reduceColor [^long rgba n]
  (let    [c (unpackrgba rgba)
           rr (* (int (/ (c 0) n)) n)
           rg (* (int (/ (c 1) n)) n)
           rb (* (int (/ (c 2) n)) n)
          ]
    (packrgba rr rg rb (c 3))
    )
  )
#+end_src

** Test code
*** Links to helpful places
	-	[[http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html][Java BufferedImage class docs]]
	-	[[http://stackoverflow.com/questions/10880083/get-rgb-of-a-bufferedimage][Getting RGB value of buffeeredImage]]
	-	[[http://stackoverflow.com/questions/19202082/clojure-amap-is-very-slow][Why amap is running slow]]
	-	[[http://www.slideshare.net/mikeranderson/2013-1114-enter-thematrix][Core.matrix presentation]]

	The main test program

#+begin_src clojure :tangle src/image/core.clj
(defn -main
[& args]



)
#+end_src
